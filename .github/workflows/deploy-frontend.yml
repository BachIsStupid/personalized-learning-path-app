# .github/workflows/deploy-frontend.yml
name: Deploy Frontend to Vercel

on:
  push:
    branches: [ main ] # Or your deployment branch
    paths:
      - 'client/**' # Only run if client code changes
      - '.github/workflows/deploy-frontend.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Note: Vercel has excellent Git integration. Usually, you don't need a complex
      # workflow file. Just connecting your Git repo in the Vercel dashboard
      # enables automatic deployments on pushes to the specified branch (e.g., main).

      # If you NEED manual control or more complex build steps via Actions:
      # 1. Install Vercel CLI
      # - name: Install Vercel CLI
      #   run: npm install --global vercel@latest
      #
      # 2. Pull Vercel Project Settings (if needed)
      # - name: Pull Vercel Environment Information
      #   run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      #   working-directory: ./client
      #
      # 3. Build Project
      # - name: Build Project Artifacts
      #   run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      #   working-directory: ./client
      #
      # 4. Deploy Project Artifacts to Vercel
      # - name: Deploy Project Artifacts to Vercel
      #   run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
      #   working-directory: ./client

      # ---> For most use cases, Vercel's built-in Git integration is sufficient and simpler <---
      # ---> Just ensure your Vercel project points to the 'client' directory as the Root Directory <---